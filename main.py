import os
import json
import time
from datetime import datetime, timedelta
import requests
import pandas as pd
import matplotlib.pyplot as plt
from flask import Flask
from PIL import Image
from groq import Groq
from dotenv import load_dotenv

load_dotenv()

OKX_BASE_URL = "https://www.okx.com"
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
NOTIFIED_FILE = "notified_pairs.json"

client = Groq(api_key=GROQ_API_KEY)
app = Flask(__name__)

# --- ÈÄöÁü•Â±•Ê≠¥Ë™≠„ÅøËæº„Åø ---
def load_notified():
    if os.path.exists(NOTIFIED_FILE):
        with open(NOTIFIED_FILE, "r") as f:
            return json.load(f)
    return {}

def save_notified(data):
    with open(NOTIFIED_FILE, "w") as f:
        json.dump(data, f)

# --- OKX„Åã„ÇâOHLCVÂèñÂæó ---
def fetch_ohlcv(symbol):
    url = f"{OKX_BASE_URL}/api/v5/market/candles?instId={symbol}&bar=15m&limit=100"
    res = requests.get(url).json()

    if not res.get("data") or len(res["data"]) < 30:
        raise ValueError(f"{symbol} „ÅÆOHLCV„Éá„Éº„Çø„Åå‰∏çË∂≥„Åæ„Åü„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì")

    df = pd.DataFrame(res["data"], columns=["timestamp", "open", "high", "low", "close", "volume"])
    df = df.iloc[::-1].copy()
    df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)
    return df

# --- ÊåáÊ®ôË®àÁÆó ---
def calculate_indicators(df):
    if df.empty or len(df) < 26:
        raise ValueError("ÂçÅÂàÜ„Å™„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")

    df["ema12"] = df["close"].ewm(span=12).mean()
    df["ema26"] = df["close"].ewm(span=26).mean()
    df["macd"] = df["ema12"] - df["ema26"]
    df["signal"] = df["macd"].ewm(span=9).mean()

    delta = df["close"].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df["rsi"] = 100 - (100 / (1 + rs))

    return df

# --- „ÉÅ„É£„Éº„ÉàÁîªÂÉèÁîüÊàê ---
def generate_chart(df, symbol):
    plt.figure(figsize=(10, 4))
    plt.plot(df["close"], label="Close Price", color="black")
    plt.title(f"{symbol} Close Price")
    plt.xlabel("Index")
    plt.ylabel("Price")
    plt.grid(True)
    plt.legend()
    image_path = f"{symbol.replace('/', '_')}.png"
    plt.savefig(image_path)
    plt.close()
    return image_path

# --- Groq „Åß„Ç∑„Ç∞„Éä„É´ÂàÜÊûê ---
def analyze_with_groq(df):
    df_trimmed = df[["close", "macd", "signal", "rsi"]].tail(30).copy()
    df_trimmed.reset_index(drop=True, inplace=True)
    df_str = df_trimmed.to_string(index=False)

    prompt = f"""
‰ª•‰∏ã„ÅØ‰ªÆÊÉ≥ÈÄöË≤®„ÅÆ15ÂàÜË∂≥„Éá„Éº„Çø„Åß„Åô„ÄÇMACD„ÉªSignal„ÉªRSI„ÅÆË¶≥ÁÇπ„Åã„Çâ„ÄÅË≤∑„ÅÑ„Ç∑„Ç∞„Éä„É´„Åæ„Åü„ÅØÂ£≤„Çä„Ç∑„Ç∞„Éä„É´„ÅåÂá∫„Å¶„ÅÑ„Çã„Åã„ÇíÂà§Êñ≠„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
Âá∫Âäõ„ÅØ‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{{
  "signal": "buy" „Åæ„Åü„ÅØ "sell" „Åæ„Åü„ÅØ "neutral",
  "confidence": Êï∞ÂÄ§ (0„Äú100)
}}

‰ª•‰∏ã„Åå„Éá„Éº„Çø„Åß„ÅôÔºö

{df_str}
"""

    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="llama3-8b-8192"
    )

    try:
        result = json.loads(chat_completion.choices[0].message.content)
        return result
    except Exception:
        return {"signal": "neutral", "confidence": 0}

# --- Telegram ÈÄöÁü• ---
def send_to_telegram(symbol, signal, confidence, image_path):
    message = f"üìà <b>{symbol}</b>\n„Ç∑„Ç∞„Éä„É´: <b>{signal.upper()}</b>\n‰ø°È†ºÂ∫¶: {confidence}%"
    send_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"

    with open(image_path, "rb") as image:
        files = {"photo": image}
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "caption": message,
            "parse_mode": "HTML"
        }
        res = requests.post(send_url, data=data, files=files)
        print(f"[TELEGRAM] status={res.status_code}")

# --- „É°„Ç§„É≥Âá¶ÁêÜ ---
def run_analysis():
    print("[INFO] Âá¶ÁêÜÈñãÂßã")
    notified = load_notified()
    updated_notified = {}

    url = f"{OKX_BASE_URL}/api/v5/public/instruments?instType=SWAP"
    symbols = [item["instId"] for item in requests.get(url).json()["data"] if item["instId"].endswith("-USDT-SWAP")]

    now = datetime.utcnow()

    for symbol in symbols:
        try:
            last_notified = notified.get(symbol)
            if last_notified:
                last_dt = datetime.strptime(last_notified, "%Y-%m-%d %H:%M:%S")
                if now - last_dt < timedelta(hours=1):
                    continue

            df = fetch_ohlcv(symbol)
            df = calculate_indicators(df)
            result = analyze_with_groq(df)

            if result["signal"] in ["buy", "sell"] and result["confidence"] >= 65:
                image_path = generate_chart(df, symbol)
                send_to_telegram(symbol, result["signal"], result["confidence"], image_path)
                updated_notified[symbol] = now.strftime("%Y-%m-%d %H:%M:%S")
                print(f"[NOTIFY] {symbol} - {result}")

        except Exception as e:
            print(f"[ERROR] {symbol} ‚Üí {e}")

    notified.update(updated_notified)
    save_notified(notified)
    print("[INFO] Âá¶ÁêÜÂÆå‰∫Ü")

# --- Flask„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà ---
@app.route("/")
def index():
    return "OK"

@app.route("/run_analysis")
def run_analysis_route():
    run_analysis()
    return "Analysis completed"

# --- ÂÆüË°åÁî® ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
